// Declaración de una función recursiva 
function int factorial(int n) {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

// Declaración de una función que mezcla diferentes tipos de operaciones
function int complexFunction(int a, int b) {
    int result = (a + b) * (b - a) / 2;
    bool condition = (result > 10) && (a != b) || (a < 5);
    
    if (condition) {
        print("Condition met, computing factorial...");
        result = factorial(a);
    } else {
        result = 0;
    }

    return result;
}



// Otra función para demostrar las declaraciones condicionales y bucles
function void advancedLoop() {
    int count = 0;
    while (count < 10) {
        print("Current count: " + count);
        count++;
    }

    // Uso de 'for' anidado para demostrar control complejo de bucles
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 2; j++) {
            print("i: " + i + ", j: " + j);
        }
    }

    return;
}



//////////////////////////////////////////////////
// Variables globales
int x = 100;
int mod = 17 % 5;
int n = -x;
bool isPositive = x > 0;
string greeting = "Hello, B-Minor!";
char initial = 'B';

int arr[5]; // Declaración del arreglo
// Operaciones con matrices
int matrix[][];
int arr2[5];


// Función que suma dos números
function int add(int a, int b) 
    return a + b;
}

// Función principal
function void main() {
    int result = add(3, 7);
    
    if (result > 5) {
        print("The result is greater than 5");
    }

    {
        int y = 20;
        {
            int z = x + y;
            print(z);
        }
    }

    return;
}

// Función con bloques anidados
function void nestedExample() {
    int outer = 3;

    {
        int inner = outer + 2;
        print(inner);
    }
}

/////////////////////// PRUEBAS DE CHATGPT 

int complex = (x + 5) * mod - 3 / n;
bool check = (x > 0) && (n < 5) || (mod == 0);


function int factorial(int n) {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

int calculated = ((x + 5) * (mod - 3)) / ((n - 2) + (mod % 3));

